
process {
  cpus = 2
}

params {
  
  // Input options
  pipeline                   = ""
  path_to_pipelines          = "${projectDir}/modules/pipelines"
  pipeline_path              = "${params.path_to_pipelines}/${params.pipeline}" // remove and directly
  pipeline_test_config       = "${params.pipeline_path}/conf/test.config"
  pipeline_config            = "${projectDir}/modules/pipelines/${params.pipeline}/nextflow.config"
  // Benchmark related params
  benchmarker_path           = "${projectDir}/modules/benchmarkers"
  skip_benchmark             = false
  
  // Boilerplate options
  enable_conda               = false
  clusterOptions             = ''  
  outdir                     = "${pipeline_path}/results"
  name                       = false
  multiqc_config             = false
  email                      = false
  email_on_fail              = false
  max_multiqc_email_size     = 25.MB
  plaintext_email            = false
  monochrome_logs            = false
  help                       = false
  tracedir                   = "${params.outdir}/pipeline_info"
  custom_config_version      = 'master'
  custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
  hostnames                  = false
  config_profile_description = ''
  config_profile_contact     = ''
  config_profile_url         = ''

  // Defaults only, expecting to be overwritten
  max_memory = 128.GB
  max_cpus = 16
  max_time = 240.h

}

try {
      includeConfig "${params.pipeline_config}"
} catch (Exception e) {
  System.err.println("====================================================\n" +
                     "WARN: The included module pipeline `$params.pipeline`\n" +
                     "      does not declare any 'nextflow.config' file.\n" +
                     "      You can include it at `${params.path_to_pipelines}`\n" +
                     "      or otherwise use `--pipeline_config` to set its path.\n"+ 
                     "====================================================\n")
  
}

profiles {
    // nf-benchmark native profiles must be prefixed with "nfb-"
    // avoids conflicts with the pipeline and benchmarker profiles that may have the same name
    'nfb-docker' { 
      docker.enabled = true
      docker.scratch = true 
      // Avoid this error:
      //   WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.
      // Testing this in nf-core after discussion here https://github.com/nf-core/tools/pull/351
      // once this is established and works well, nextflow might implement this behavior as new default.
      docker.runOptions = '-u \$(id -u):\$(id -g)'
    }
    'nfb-singularity' {
      singularity.enabled = true
      singularity.autoMounts = true
    }
        
    // should be able to include params.pipeline_test_config
    'nfb-test' {
      try {
            includeConfig "${params.pipeline_test_config}"
            // Do I need a benchmarker test config file? #TODO
        } catch (Exception e) {
            System.err.println("ERROR: The selected pipeline \"${params.pipeline}\" needs a test configuration for nf-benchmark ${params.pipeline_test_config}")
            System.exit(0)
        }
    } 
}

// Include path to bin of pipeline module (no included by default)
modulesPipelineBin = "$PATH:${params.pipeline_path}/bin"

env {
     PATH = modulesPipelineBin
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
}


manifest {
  name = 'nf-benchmark'
  author = 'Jose Espinosa-Carrasco'
  homePage = 'https://github.com/nf-core/nfbenchmark'
  description = 'A tool to benchmark DSL2 Nextflow pipelines'
  mainScript = 'main.nf'
  nextflowVersion = '>=20.07.1'
  version = '1.0dev'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
